# -*- coding: utf-8 -*-

"""
/***************************************************************************
 BkAG
                                 A QGIS plugin
 Generates a stand delineation based on a VHM.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-02-07
        copyright            : (C) 2025 by Raffael Bienz
        email                : raffael.bienz@ag.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Raffael Bienz'
__date__ = '2025-02-07'
__copyright__ = '(C) 2025 by Raffael Bienz'

# This will get replaced with a git SHA1 when you do a git archive
__revision__ = '$Format:%H$'

if __name__ == "__main__":  # this will be invoked if this module is being run directly, but not via import!
    __package__ = 'bk_ag'  # make sure relative imports work when testing

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,                       
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterString,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterEnum,
                       QgsVectorLayer,
                       QgsField,
                       QgsProject,
                       QgsVectorFileWriter,
                       QgsApplication)
from qgis.PyQt.QtCore import QVariant
from qgis.core.additions.edit import edit
import os.path
import processing
import logging, logging.handlers
import numpy as np
from datetime import datetime
import shutil

import sys

from tbk_qgis.tbk.bk_ag.bk_processing import (simplify_polygons,
                                              clip_polygons,
                                              clip_to_perimeter,
                                              eliminate_small_polygons,
                                              merge_small_polygons,
                                              delete_small_polygons,
                                              buffer_polygons,
                                              multipart_to_singlepart,
                                              polygon_to_raster)

from tbk_qgis.tbk.bk_ag.vhm_processing import (reclassify_vhm,
                                               cut_vhm_to_perimeter,
                                               focal_folder,
                                               vhm_to_polygon,
                                               sieve_vhm)
from tbk_qgis.tbk.utility.tbk_utilities import (getVectorSaveOptions)

from tbk_qgis.tbk.utility.qgis_processing_utility import QgisHandler

class BkAGAlgorithm(QgsProcessingAlgorithm):
    """
    Calculates a stand delineation based on a VHM.
    """

    def addAdvancedParameter(self, parameter):
        parameter.setFlags(parameter.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        return self.addParameter(parameter)

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT_ROOT = 'output_root'
    VHM = 'VHM'
    ROADS = 'roads'
    PERIMETER = 'perimeter'
    FIELD_DISSOLVE = 'field_dissolve'
    WINDOW_SIZE_ALL = 'window_size_all'
    WINDOW_SIZE_SH1 = 'window_size_sh1'
    WEIGHTING_SH1 = 'weighting_sh1'
    SHRINK_DISTANCE = 'shrink_distance'
    SIEVE_THRESHOLD = 'sieve_threshold'
    MIN_AREA_BK = 'min_area_bk'
    MIN_AREA_PERIMETER = 'min_area_perimeter'
    SIMPLIFY_THRESHOLD = 'simplify_threshold'
    LIMIT_JU = 'limit_ju'
    LIMIT_SH1 = 'limit_sh1'
    LIMIT_SH2 = 'limit_sh2'
    LIMIT_BH1 = 'limit_bh1'
    LIMIT_BH2 = 'limit_bh2'
    OUTPUT_FORMAT = "output_format"
    DEL_TMP = "del_tmp"


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        # VHM 1m as main input   
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.VHM,
                self.tr('VHM 1m (.tif)'),
                [QgsProcessing.TypeRaster]
            )
        )

        # Perimeter dataset to clip final result      
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.PERIMETER,
                self.tr("Perimeter dataset to clip final result"),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        # Dissolve field 
        #ToDo: Dropdown with fields
        self.addParameter(
                QgsProcessingParameterString(
                self.FIELD_DISSOLVE,
                self.tr("Field of dataset to dissolve"),
                defaultValue = "Eigentue_1"
            )
        )

        # Dataset of forest roads to clip stands   
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ROADS,
                self.tr("Forest roads dataset (lines) to clip stands"),
                [QgsProcessing.TypeVectorLine],
                optional=True
            )
        )

        # Output folder
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                self.OUTPUT_ROOT,
                self.tr('Output folder')
            )
        )

        # Advanced parameters
        parameter = QgsProcessingParameterNumber(
            self.WINDOW_SIZE_ALL,
            self.tr("Window size for focal statistics over all cells"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=25
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterNumber(
            self.WINDOW_SIZE_SH1,
            self.tr("Window size for focal statistics over SH1 cells"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=5
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterNumber(
            self.WEIGHTING_SH1,
            self.tr("Percentage of cells so that classification = SH1"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=40,
            minValue=0,
            maxValue=100
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterNumber(
            self.SHRINK_DISTANCE,
            self.tr("Distance to shrink and expand features"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=8
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterNumber(
            self.SIEVE_THRESHOLD,
            self.tr("Threshold to sieve areas"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=200
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterNumber(
            self.SIMPLIFY_THRESHOLD,
            self.tr("Threshold for polygon simplification"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=2,
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterNumber(
            self.MIN_AREA_BK,
            self.tr("Minimum area for a stand in m2"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=2000,
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterNumber(
            self.MIN_AREA_PERIMETER,
            self.tr("Minimum area for perimeter polygons"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=1000,
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterNumber(
            self.LIMIT_JU,
            self.tr("Upper limit in m for young growth"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=7,
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterNumber(
            self.LIMIT_SH1,
            self.tr("Upper limit in m for pole wood 1"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=14,
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterNumber(
            self.LIMIT_SH2,
            self.tr("Upper limit in m for pole wood 2"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=20,
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterNumber(
            self.LIMIT_BH1,
            self.tr("Upper limit in m for timber 1"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=25,
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterNumber(
            self.LIMIT_BH2,
            self.tr("Upper limit in m for timber 2"),
            type=QgsProcessingParameterNumber.Integer,
            defaultValue=30,
        )
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterEnum(
            self.OUTPUT_FORMAT,
            self.tr('Select output format'),
            options=[self.tr('.gpkg'),self.tr('.shp')],
            defaultValue=0,
            optional=True)
        self.addAdvancedParameter(parameter)

        parameter = QgsProcessingParameterBoolean(
            self.DEL_TMP,
            self.tr("Delete temporary files"),
            defaultValue=True)
        self.addAdvancedParameter(parameter)

                
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # ------- Load data -------#
        vhm = str(self.parameterAsRasterLayer(parameters, self.VHM, context).source())
        perimeter = str(self.parameterAsVectorLayer(parameters, self.PERIMETER, context).source())
        roads = self.parameterAsVectorLayer(parameters, self.ROADS, context)
        output_root = self.parameterAsString(parameters, self.OUTPUT_ROOT, context)
        field_dissolve = self.parameterAsString(parameters, self.FIELD_DISSOLVE, context)  
        window_size_all = self.parameterAsInt(parameters, self.WINDOW_SIZE_ALL, context) 
        window_size_sh1 = self.parameterAsInt(parameters, self.WINDOW_SIZE_SH1, context) 
        weighting_sh1 = self.parameterAsInt(parameters, self.WEIGHTING_SH1, context)
        shrink_distance = self.parameterAsInt(parameters, self.SHRINK_DISTANCE, context)
        sieve_threshold = self.parameterAsInt(parameters, self.SIEVE_THRESHOLD, context)
        min_area_bk = self.parameterAsInt(parameters, self.MIN_AREA_BK, context)  
        min_area_perimeter = self.parameterAsInt(parameters, self.MIN_AREA_PERIMETER, context)
        simplify_threshold = self.parameterAsInt(parameters, self.SIMPLIFY_THRESHOLD, context)
        limit_ju = self.parameterAsInt(parameters, self.LIMIT_JU, context)  
        limit_sh1 = self.parameterAsInt(parameters, self.LIMIT_SH1, context)
        limit_sh2 = self.parameterAsInt(parameters, self.LIMIT_SH2, context)  
        limit_bh1 = self.parameterAsInt(parameters, self.LIMIT_BH1, context)
        limit_bh2 = self.parameterAsInt(parameters, self.LIMIT_BH2, context)
        del_tmp = self.parameterAsBool(parameters, self.DEL_TMP, context)
        output_format = self.parameterAsInt(parameters, self.OUTPUT_FORMAT, context)

        reclass_table = [-99,limit_ju,1, limit_ju,limit_sh1,2, limit_sh1,limit_sh2,3, limit_sh2,limit_bh1,4, limit_bh1,limit_bh2,5, limit_bh2,99,6]
        
        # ------- Set paths -------#
        # General output path
        wd_path = os.path.join(output_root,f'bk_{datetime.now().strftime("%Y%m%d-%H%M")}')
        #wd_path = os.path.join(output_root,f'bk_test') # For testing
        os.makedirs(wd_path, exist_ok=True)

        # Paths for perimeters
        perimeter_path = os.path.join(wd_path, 'perimeter')
        os.makedirs(perimeter_path, exist_ok=True)

        perimeter_dissolve_path = os.path.join(perimeter_path, 'perimeter_dissolve.gpkg')
        perimeter_split_path = os.path.join(perimeter_path, 'perimeter_split.gpkg')
        perimeter_snap_path = os.path.join(perimeter_path, 'perimeter_snap_roads.gpkg')
        perimeter_dissolve_roads_path = os.path.join(perimeter_path, 'perimeter_dissolve_roads.gpkg')
        perimeter_clean_path = os.path.join(perimeter_path, 'perimeter_clean.gpkg')

        # Paths for VHMs
        vhm_clipped_path = os.path.join(wd_path, 'vhm_tiles')
        os.makedirs(vhm_clipped_path, exist_ok=True)

        # Path for interim results
        features_path = os.path.join(wd_path, 'stand_maps')
        os.makedirs(features_path, exist_ok=True)

        # Path for final results
        merged_output_path = os.path.join(features_path, 'bk_merged.gpkg')
        if output_format==0:
            final_output_path = os.path.join(wd_path, 'bk_final.gpkg')
        if output_format==1:
            final_output_path = os.path.join(wd_path, 'bk_final.shp') 

        # Path for the log
        logfile_tmp_path  = os.path.join(wd_path, 'bk_processing.log')

        # ------- Setup logger -------#
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s; %(processName)s; %(levelname)s; %(name)s; %(message)s",
            handlers=[
                logging.FileHandler(logfile_tmp_path, mode='w'),
                QgisHandler(feedback),
                logging.StreamHandler()
            ])

        rootLogger = logging.getLogger()
        rootLogger.info('Run BK AG')

        # ------- Processing -------#
        # Dissolve ownership
        rootLogger.info('Dissolve perimeter')
        perimeter_dissolve_owner = processing.run("native:dissolve", {'INPUT':perimeter, 'FIELD':[field_dissolve], 'OUTPUT':'TEMPORARY_OUTPUT'})
        processing.run('qgis:multiparttosingleparts', {'INPUT':perimeter_dissolve_owner['OUTPUT'], 'OUTPUT':perimeter_dissolve_path})
        perimeter_dissolve_singlepart = QgsVectorLayer(perimeter_dissolve_path, "Perimeter dissolved", "ogr")

        # Split perimeter with roads
        if roads is not None:
            rootLogger.info('Split perimeter with roads')
            # Extend roads
            roads_extended = processing.run("native:extendlines", {'INPUT':roads,'START_DISTANCE':5,
                                                                   'END_DISTANCE':5,'OUTPUT':'TEMPORARY_OUTPUT'})
            
            # Buffer roads
            roads_bufferd = processing.run("native:buffer", {'INPUT':roads_extended['OUTPUT'],
                                                             'DISTANCE':0.0001,'SEGMENTS':5,'END_CAP_STYLE':0,
                                                             'JOIN_STYLE':0,'MITER_LIMIT':2,'DISSOLVE':False,
                                                             'SEPARATE_DISJOINT':False,'OUTPUT':'TEMPORARY_OUTPUT'})
            
            # Cut out roads from perimeter
            peri_split = processing.run("native:difference", {'INPUT': perimeter_dissolve_singlepart,
                                                 'OVERLAY':roads_bufferd['OUTPUT'],
                                                 'OUTPUT':'TEMPORARY_OUTPUT','GRID_SIZE':None})

            peri_single = processing.run('qgis:multiparttosingleparts', {'INPUT':peri_split['OUTPUT'], 'OUTPUT':perimeter_split_path})
            
            # Snap perimeters to roads
            processing.run("native:snapgeometries", {'INPUT':peri_single['OUTPUT'],
                                                     'REFERENCE_LAYER':roads_extended['OUTPUT'],
                                                     'TOLERANCE':1,'BEHAVIOR':0,
                                                     'OUTPUT':perimeter_snap_path})
            
            # Small buffer to remove geometry errors

            peri_buf = processing.run("native:buffer", {'INPUT':perimeter_snap_path,'DISTANCE':1e-04,'SEGMENTS':5,'END_CAP_STYLE':0,
                'JOIN_STYLE':0,'MITER_LIMIT':2,'DISSOLVE':False,'OUTPUT':'TEMPORARY_OUTPUT'})
            
            perimeter_split = peri_buf['OUTPUT']
        else:
            perimeter_split=perimeter_dissolve_singlepart

        # Combine small perimeters with neighbors
        expression = "$area < " + str(min_area_perimeter)
        perimeter_split.selectByExpression(expression)

        param = {'INPUT': perimeter_split, 'MODE': 2, 'OUTPUT': 'memory:'}
        algoOutput = processing.run("qgis:eliminateselectedpolygons", param)

        ctc = QgsProject.instance().transformContext()
        QgsVectorFileWriter.writeAsVectorFormatV3(algoOutput['OUTPUT'], perimeter_dissolve_roads_path, ctc,
                                            getVectorSaveOptions('GPKG', 'utf-8'))

        # Apply small buffer to remove geometry errors
        processing.run("native:buffer", {'INPUT':perimeter_dissolve_roads_path,'DISTANCE':1e-04,'SEGMENTS':5,'END_CAP_STYLE':0,
            'JOIN_STYLE':0,'MITER_LIMIT':2,'DISSOLVE':False,'OUTPUT':perimeter_clean_path})

        perimeter_dissolve = QgsVectorLayer(perimeter_clean_path)

        # Add id attribute
        rootLogger.info('Add id attribute')
        perimeter_dissolve.dataProvider().addAttributes([QgsField("id",QVariant.Int)])
        perimeter_dissolve.updateFields()
        field_idx = perimeter_dissolve.fields().indexOf('id')
        with edit(perimeter_dissolve):
            for i,feat in enumerate(perimeter_dissolve.getFeatures()):
                perimeter_dissolve.changeAttributeValue(feat.id(), field_idx, i)

        # Cut VHM to perimeter elements for separate calculation
        rootLogger.info('Cut VHM to perimeter')
        vhm_prefix = 'vhm_'
        cut_vhm_to_perimeter(perimeter_dissolve, vhm, vhm_prefix, vhm_clipped_path)

        # Reclassification  
        rootLogger.info('Reclassification of VHM')      
        vhm_recl_prefix = 'vhm_recl_'        
        reclassify_vhm(perimeter_dissolve, vhm_prefix, vhm_recl_prefix, reclass_table, vhm_clipped_path)

        # Focal statistics SH1 (only Ju+SH1, 40% majority, 5m)
        rootLogger.info('Focal statistics Ju+SH1')
        focal_folder(perimeter_dissolve, window_size_sh1, 'SH1', weighting_sh1, vhm_clipped_path, "vhm_recl_", vhm_clipped_path, "vhm_focal1_", False)
        
        # Focal statistics all 1 (majority, 25m)
        rootLogger.info('Focal statistics all 1')
        focal_folder(perimeter_dissolve, window_size_all, 'majority', 0, vhm_clipped_path, "vhm_focal1_", vhm_clipped_path, "vhm_focal2_", False)

        # Focal statistics all 2 (majority, 25m)
        rootLogger.info('Focal statistics all 2')
        focal_folder(perimeter_dissolve, window_size_all, 'majority', 0, vhm_clipped_path, "vhm_focal2_", vhm_clipped_path, "vhm_focal3_", True)

        # Shrink
        rootLogger.info('Shrinking areas')
        vhm_to_polygon(perimeter_dissolve, "vhm_focal3_", "vhm_poly_", vhm_clipped_path, features_path)
        buffer_polygons(perimeter_dissolve, "vhm_poly_", "vhm_poly_negbuf_", features_path, -shrink_distance)

        # Buffer
        rootLogger.info('Buffering areas')
        buffer_polygons(perimeter_dissolve, "vhm_poly_negbuf_", "vhm_poly_posbuf_", features_path, shrink_distance)
        clip_polygons(perimeter_dissolve, "vhm_poly_", "vhm_poly_posbuf_", "vhm_poly_clipped_", features_path,)
        multipart_to_singlepart(perimeter_dissolve, "vhm_poly_clipped_", "vhm_poly_posbuf_single_", features_path)
        delete_small_polygons(perimeter_dissolve, "vhm_poly_posbuf_single_", "vhm_poly_minarea_", features_path, 100)

        # Expand
        rootLogger.info('Focal statistics expand')
        polygon_to_raster(perimeter_dissolve, "vhm_poly_minarea_", "vhm_", "vhm_rasterized_", vhm_clipped_path, features_path)
        focal_folder(perimeter_dissolve, window_size_all, 'expand', 0, vhm_clipped_path, "vhm_rasterized_", vhm_clipped_path, "vhm_expand_", False)

        # Sieve small areas
        rootLogger.info('Sieve small areas')
        sieve_vhm(perimeter_dissolve, vhm_clipped_path, "vhm_expand_", vhm_clipped_path, "vhm_sieved_", sieve_threshold)

        # Convert VHM to Polygon
        rootLogger.info('Convert VHM to polygon')
        source_prefix = "vhm_sieved_"
        dest_prefix = "bk_raw_"
        vhm_to_polygon(perimeter_dissolve, source_prefix, dest_prefix, vhm_clipped_path, features_path)        

        # Simplify polygons
        rootLogger.info('Simplify polygon geometry')
        source_prefix = "bk_raw_"
        dest_prefix = "bk_simple_"
        simplify_polygons(perimeter_dissolve, source_prefix, dest_prefix, simplify_threshold, features_path)

        # Clip polygons
        rootLogger.info('Clip polygons to perimeter')
        source_prefix = "bk_simple_"
        dest_prefix = "bk_clip_"
        clip_to_perimeter(perimeter_dissolve, source_prefix, dest_prefix, features_path)
        
        # Multipart to singlepart
        rootLogger.info('Multipart to singleparts')
        source_prefix = "bk_clip_"
        dest_prefix = "bk_single_"
        multipart_to_singlepart(perimeter_dissolve, source_prefix, dest_prefix, features_path)
        
        # Combine polygons < 10a with neighbors based on common border
        rootLogger.info('Dissolve small polygons 1')
        source_prefix = "bk_single_"
        dest_prefix = "bk_merge_"
        eliminate_small_polygons(perimeter_dissolve, source_prefix, dest_prefix, min_area_bk/2, features_path)

        # Combine polygons < 20a with neighbors based on similar development stages
        rootLogger.info('Dissolve small polygons 2')
        source_prefix = "bk_merge_"
        dest_prefix = "bk_def_"
        merge_small_polygons(perimeter_dissolve, source_prefix, dest_prefix, min_area_bk, features_path)

        # Combine all polygons 
        rootLogger.info('Combine all polygons and create final output')
        source_prefix = "bk_def_"
        paths = []
        for feature in perimeter_dissolve.getFeatures():
            id = feature['id']
            name_bk = source_prefix + str(id) + '.gpkg'
            bk_path = os.path.join(features_path, name_bk)
            paths.append(bk_path)

        processing.run("native:mergevectorlayers", {'LAYERS':paths,'CRS':None,'OUTPUT': merged_output_path})

        processing.run("native:deletecolumn", {'INPUT': merged_output_path,'COLUMN': ['path', 'layer', 'cat'],'OUTPUT': final_output_path})

        if del_tmp:
            rootLogger.info('Deleting all temporary files.')
            shutil.rmtree(perimeter_path, ignore_errors=True)
            shutil.rmtree(features_path, ignore_errors=True)
            shutil.rmtree(vhm_clipped_path, ignore_errors=True)

        logging.FileHandler(logfile_tmp_path).close()
        rootLogger=None

        return {self.OUTPUT_ROOT: output_root}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Generate BK AG'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    @property
    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        # return self.tr(self.groupId())
        return '1 Bk generation (core)'

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'tbkcore'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return BkAGAlgorithm()
