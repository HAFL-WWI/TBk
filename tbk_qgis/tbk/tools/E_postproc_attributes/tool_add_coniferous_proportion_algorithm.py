#todo
import logging
import os

from qgis.core import (QgsProcessingOutputFile,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterString,
                       QgsProcessingParameterVectorLayer)
from tbk_qgis.tbk.general.tbk_utilities import ensure_dir
from tbk_qgis.tbk.tools.E_postproc_attributes.add_coniferous_proportion import add_coniferous_proportion
from tbk_qgis.tbk.tools.E_postproc_attributes.tbk_qgis_processing_algorithm_toolsE import TBkProcessingAlgorithmToolE

class TBkAddConiferousProportionAlgorithm(TBkProcessingAlgorithmToolE):
    """
    todo
    """
    # ------- Define Constants -------#
    # Constants used to refer to parameters and outputs.

    # These constants will be used when calling the algorithm from another algorithm,
    # or when calling from the QGIS console.

    # Directory containing the output files
    OUTPUT = "OUTPUT"
    # Folder for storing all input files and saving output files
    RESULT_DIR = "result_dir"
    # File storing configuration parameters
    CONFIG_FILE = "config_file"
    # Coniferous raster to calculate stand mean
    CONIFEROUS_RASTER = "coniferous_raster"

    # Default log file name
    LOGFILE_NAME = "logfile_name"

    # Input layer to process
    STANDS_WITH_DG = "stands_with_dg"
    # Stands output with supplementary crown coverage fields
    OUTPUT_STANDS_WITH_CONIFEROUS = "stands_with_coniferous"
    # Additional parameters
    # Also calc coniferous prop. for main layer
    CALC_MIXTURE_FOR_MAIN_LAYER = "calc_mixture_for_main_layer"
    # Delete temporary files and fields
    DEL_TMP = "del_tmp"

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along with some other properties.
        """
        # Indicates whether the tool is running in standalone or modularized mode, and adjusts the GUI/behavior if needed.
        is_standalone_context = True

        # --- Handle config parameter
        if config:
            if 'is_standalone_context' in config:
                is_standalone_context = config['is_standalone_context']

        # --- Parameters generated by the stand delineation algorithm

        # Config file containing all parameter key-value pairs
        self.addParameter(QgsProcessingParameterFile(self.CONFIG_FILE,
                                                     'Configuration file to set the algorithm parameters. The bellow '
                                                     'non-optional parameters must still be set but will not be used.',
                                                     extension='toml',
                                                     optional=True))

        # Coniferous raster to calculate stand mean
        self.addParameter(QgsProcessingParameterRasterLayer(self.CONIFEROUS_RASTER,
                                                            "Coniferous raster to calculate stand mean (.tif)",
                                                            optional=True))
        if is_standalone_context:
            # Stand raster where the coniferous proportion will be computed
            self.addParameter(QgsProcessingParameterVectorLayer(self.STANDS_WITH_DG,
                                                                "Clipped stands vector file, which will be used as input for calculating the proportion of coniferous trees in each polygon",
                                                                ))

            # --- Add output definition, so that they can be used in model designer
            # Stands output with coniferous proportion fields
            self.addOutput(QgsProcessingOutputFile(self.OUTPUT_STANDS_WITH_CONIFEROUS,
                                                   "Stand Output file with coniferous proportion fields"))

        # These parameters are only displayed a config parameter is given
        if not config:
            self.addParameter(QgsProcessingParameterFile(self.RESULT_DIR,
                                                         "Directory containing all TBk output folders and files. This "
                                                         "folder must contain the previous generated data",
                                                         behavior=QgsProcessingParameterFile.Folder))

        # --- Advanced Parameters

        # Additional parameters
        parameter = QgsProcessingParameterString(self.LOGFILE_NAME, "Log File Name (.log)",
                                                 defaultValue="tbk_processing.log")
        self._add_advanced_parameter(parameter)

        parameter = QgsProcessingParameterBoolean(self.CALC_MIXTURE_FOR_MAIN_LAYER,
                                                  "Also calc coniferous prop. for main layer",
                                                  defaultValue=True)
        self._add_advanced_parameter(parameter)

        parameter = QgsProcessingParameterBoolean(self.DEL_TMP, "Delete temporary files and fields",
                                                  defaultValue=True)
        self._add_advanced_parameter(parameter)

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # --- Get input parameters
        params = self._extract_context_params(parameters, context)

        # Adapt the parameters if modular mode
        if "invoker_params" in parameters:
            clipped_stands_input_name = parameters["invoker_params"]["clipped_stands_input"]
            params.clipped_stands_input = parameters[clipped_stands_input_name]

        # Handle the working root and temp output folders
        # todo: do the same for the other algorithms:
        bk_dir = self._get_bk_output_dir(params.result_dir)
        # todo: use this instead of tbk_result_dir in calculate_dg()
        dg_dir = self._get_dg_output_dir(params.result_dir)
        tmp_output_folder = self._get_tmp_output_path(os.path.join(params.result_dir, 'bk_process'))
        ensure_dir(tmp_output_folder)

        # Set the logger
        self._configure_logging(params.result_dir, params.logfile_name)
        log = logging.getLogger(self.name())

        # --- Add coniferous proportion
        log.info('Add coniferous proportion')
        path = add_coniferous_proportion(bk_dir, tmp_output_folder, params.result_dir, params.stands_with_dg,
                                  params.coniferous_raster, params.calc_mixture_for_main_layer, del_tmp=params.del_tmp)

        return {self.OUTPUT_STANDS_WITH_CONIFEROUS: path}

    def createInstance(self):
        """
        Returns a new algorithm instance
        """
        return TBkAddConiferousProportionAlgorithm()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return '6 Add coniferous proportion'

    #todo
    def shortHelpString(self):
        """
        Returns a localised short help string for the algorithm.
        """
        return ('')
