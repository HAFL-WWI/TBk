#todo
import logging
from qgis.core import (QgsProcessingParameterBoolean,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterString)
from tbk_qgis.tbk.tools.E_postproc_attributes.attributes_default import calc_attributes
from tbk_qgis.tbk.general.tbk_utilities import ensure_dir
from tbk_qgis.tbk.tools.E_postproc_attributes.tbk_qgis_processing_algorithm_toolsE import TBkProcessingAlgorithmToolE


class TBkUpdateStandAttributesAlgorithm(TBkProcessingAlgorithmToolE):
    """
    todo
    """
    # ------- Define Constants -------#
    # Constants used to refer to parameters and outputs.

    # These constants will be used when calling the algorithm from another algorithm,
    # or when calling from the QGIS console.

    # Directory containing the output files
    OUTPUT = "OUTPUT"
    # Folder for storing all input files and saving output files
    RESULT_DIR = "result_dir"
    # File storing configuration parameters
    CONFIG_FILE = "config_file"

    # Default log file name
    LOGFILE_NAME = "logfile_name"

    # Additional parameters
    # Delete temporary files and fields
    DEL_TMP = "del_tmp"

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along with some other properties.
        """

        # --- Parameters generated by the stand delineation algorithm

        # Config file containing all parameter key-value pairs
        self.addParameter(QgsProcessingParameterFile(self.CONFIG_FILE,
                                                     'Configuration file to set the algorithm parameters. The bellow '
                                                     'non-optional parameters must still be set but will not be used.',
                                                     extension='toml',
                                                     optional=True))

        # These parameters are only displayed a config parameter is given
        if not config:
            self.addParameter(QgsProcessingParameterFile(self.RESULT_DIR,
                                                         "Directory containing all TBk output folders and files. This "
                                                         "folder must contain the previous generated data",
                                                         behavior=QgsProcessingParameterFile.Folder))

        # --- Advanced Parameters

        # Additional parameters
        parameter = QgsProcessingParameterString(self.LOGFILE_NAME, "Log File Name (.log)",
                                                 defaultValue="tbk_processing.log")
        self._add_advanced_parameter(parameter)

        parameter = QgsProcessingParameterBoolean(self.DEL_TMP, "Delete temporary files and fields",
                                                  defaultValue=True)
        self._add_advanced_parameter(parameter)

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # --- Get input parameters

        params = self._extract_context_params(parameters, context)

        # Handle the working root and temp output folders
        bk_dir = self._get_bk_output_dir(params.result_dir)

        tmp_output_folder = self._get_tmp_output_path(params.result_dir)
        ensure_dir(tmp_output_folder)

        # Set the logger
        self._configure_logging(params.result_dir, params.logfile_name)
        log = logging.getLogger(self.name())

        # --- Calc specific attributes
        log.info('Starting')
        stands_file_attributed = calc_attributes(bk_dir, tmp_output_folder, del_tmp=params.del_tmp)

        return {self.OUTPUT: stands_file_attributed}

    def createInstance(self):
        """
        Returns a new algorithm instance
        """
        return TBkUpdateStandAttributesAlgorithm()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return '7 Update stand attributes'

    #todo
    def shortHelpString(self):
        """
        Returns a localised short help string for the algorithm.
        """
        return ('')
