#todo
import logging
import os

import processing
from PyQt5.QtCore import QCoreApplication
from qgis._core import QgsProcessingParameterNumber, QgsProcessingParameterFeatureSource, QgsProcessingParameterField, \
    QgsProcessing, QgsProcessingException, QgsProcessingParameterFileDestination
from qgis.core import (QgsProcessingParameterBoolean,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterString)
from tbk_qgis.tbk.tools.E_postproc_attributes.attributes_default import calc_attributes
from tbk_qgis.tbk.general.tbk_utilities import ensure_dir
from tbk_qgis.tbk.tools.E_postproc_attributes.tbk_qgis_processing_algorithm_toolsE import TBkProcessingAlgorithmToolE


class TBkAppendStandAttributesAlgorithm(TBkProcessingAlgorithmToolE):
    """
    todo
    """
    # ------- Define Constants -------#
    # Constants used to refer to parameters and outputs.

    # These constants will be used when calling the algorithm from another algorithm,
    # or when calling from the QGIS console.

    # Directory containing the output files
    OUTPUT = "OUTPUT"
    # Folder for storing all input files and saving output files
    RESULT_DIR = "result_dir"
    # File storing configuration parameters
    CONFIG_FILE = "config_file"

    # Default log file name
    LOGFILE_NAME = "logfile_name"

    INPUT_TO_ATTRIBUTE = "input_to_attribute"
    OUTPUT_ATTRIBUTED = "output_attributed"

    # Additional parameters
    # Delete temporary files and fields
    DEL_TMP = "del_tmp"

    # VegZone parameters
    # Default Vegetation Zone
    VEGZONE_DEFAULT = "vegZoneDefault"
    # Vegetation Zone layer (polygons) for spatial join
    VEGZONE_LAYER = "vegZoneLayer"
    # Vegetation Zone Code field (in layer)
    VEGZONE_LAYER_FIELD = "vegZoneLayerField"
    # Default Forest Site Category
    FORESTSITE_DEFAULT = "forestSiteDefault"
    # Forest Site Category layer (polygons) for spatial join
    FORESTSITE_LAYER = "forestSiteLayer"
    # Forest Site Category field (in layer)
    FORESTSITE_LAYER_FIELD = "forestSiteLayerField"

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along with some other properties.
        """

        # --- Parameters generated by the stand delineation algorithm

        # Config file containing all parameter key-value pairs
        self.addParameter(QgsProcessingParameterFile(self.CONFIG_FILE,
                                                     'Configuration file to set the algorithm parameters. The bellow '
                                                     'non-optional parameters must still be set but will not be used.',
                                                     extension='toml',
                                                     optional=True))

        # These parameters are only displayed a config parameter is given
        if not config:
            self.addParameter(QgsProcessingParameterFile(self.RESULT_DIR,
                                                         "Directory containing all TBk output folders and files. This "
                                                         "folder must contain the previous generated data",
                                                         behavior=QgsProcessingParameterFile.Folder))

        # Input stand map to be merged
        self.addParameter(
            QgsProcessingParameterFeatureSource(self.INPUT_TO_ATTRIBUTE, "Input layer to join to",
                                                [QgsProcessing.TypeVectorPolygon],
                                                optional=True))
        # Output
        self.addParameter(
            QgsProcessingParameterFileDestination(self.OUTPUT_ATTRIBUTED, "Output",
                                                  "GPKG files (*.gpkg)",
                                                  optional=True))

        # --- Advanced Parameters

        # Fields for Vegetation Zone
        self._add_advanced_parameter(QgsProcessingParameterNumber(self.VEGZONE_DEFAULT, self.tr(
            "Vegetation Zone default (Code). Will be applied if no vegetation zone can be assigned from VegZone layer."
            "\n1 - hyperinsubric, 2/3 - colline /with beech, 4 - submontane, "
            "\n5 - lower montane, 6 - upper montane, 8 - high montane, 9 - sub alpine"
        ), type=QgsProcessingParameterNumber.Integer, defaultValue=2))
        self._add_advanced_parameter(
            QgsProcessingParameterFeatureSource(self.VEGZONE_LAYER, self.tr("Vegetation Zone layer"),
                                                [QgsProcessing.TypeVectorPolygon], optional=True))
        self._add_advanced_parameter(
            QgsProcessingParameterField(self.VEGZONE_LAYER_FIELD, 'Vegetation Zone Code field (in layer)',
                                        type=QgsProcessingParameterField.Numeric,
                                        parentLayerParameterName=self.VEGZONE_LAYER, allowMultiple=False,
                                        defaultValue='Code', optional=True))

        # Fields for Forest Site Category
        self._add_advanced_parameter(
            QgsProcessingParameterString(self.FORESTSITE_DEFAULT, self.tr("Forest Site Category (Code, e.g. 7a)"),
                                         optional=True))
        self._add_advanced_parameter(
            QgsProcessingParameterFeatureSource(self.FORESTSITE_LAYER, self.tr("Forest Site Category layer"),
                                                [QgsProcessing.TypeVectorPolygon], optional=True))
        self._add_advanced_parameter(
            QgsProcessingParameterField(self.FORESTSITE_LAYER_FIELD, 'Forest Site Category field (in layer)',
                                        type=QgsProcessingParameterField.Any,
                                        parentLayerParameterName=self.FORESTSITE_LAYER, allowMultiple=False,
                                        optional=True))


        # Additional parameters
        parameter = QgsProcessingParameterString(self.LOGFILE_NAME, "Log File Name (.log)",
                                                 defaultValue="tbk_processing.log")
        self._add_advanced_parameter(parameter)

        parameter = QgsProcessingParameterBoolean(self.DEL_TMP, "Delete temporary files and fields",
                                                  defaultValue=True)
        self._add_advanced_parameter(parameter)

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        print("--------------------------------------------")
        print("START Appending attributes...")

        # --- Get input parameters
        params = self._extract_context_params(parameters, context)

        # Handle the working root and temp output folders
        # todo: do the same for the other algorithms:
        bk_dir = self._get_bk_output_dir(params.result_dir)
        # todo: use this instead of tbk_result_dir in calculate_dg()
        dg_dir = self._get_dg_output_dir(params.result_dir)
        tmp_output_folder = self._get_tmp_output_path(os.path.join(params.result_dir, 'bk_process'))
        ensure_dir(tmp_output_folder)

        # Set the logger
        self._configure_logging(params.result_dir, params.logfile_name)
        log = logging.getLogger(self.name())

        # get and check perimeter file
        stands_file_cleaned = str(self.parameterAsVectorLayer(parameters, self.INPUT_TO_ATTRIBUTE, context).source())

        # get and check join files/defaults
        vegZoneDefault = self.parameterAsInt(parameters, self.VEGZONE_DEFAULT, context)
        if self.parameterAsVectorLayer(parameters, self.VEGZONE_LAYER, context):
            vegZoneLayer = str(self.parameterAsVectorLayer(parameters, self.VEGZONE_LAYER, context).source())
        else:
            vegZoneLayer = None
        vegZoneLayerField = self.parameterAsString(parameters, self.VEGZONE_LAYER_FIELD, context)
        if vegZoneLayer and not vegZoneLayerField:
            raise QgsProcessingException("vegZoneLayer provided but no vegZoneLayerField for join")
        forestSiteDefault = str(self.parameterAsString(parameters, self.FORESTSITE_DEFAULT, context))
        if self.parameterAsVectorLayer(parameters, self.FORESTSITE_LAYER, context):
            forestSiteLayer = str(self.parameterAsVectorLayer(parameters, self.FORESTSITE_LAYER, context).source())
        else:
            forestSiteLayer = None
        forestSiteLayerField = self.parameterAsString(parameters, self.FORESTSITE_LAYER_FIELD, context)
        if forestSiteLayer and not forestSiteLayerField:
            raise QgsProcessingException("forestSiteLayer provided but no forestSiteLayerField for join")

        # --- Append attributes from join layers
        log.info('Append attributes from join layers')
        # join VegZone if layer is provided
        if vegZoneLayer:
            stands_file_join = os.path.join(tmp_output_folder, "TBk_Bestandeskarte_vegZone1join.gpkg")
            param = {'layer_to_join_attribute_on': stands_file_cleaned,
                     'attribute_layer': vegZoneLayer,
                     'fields_to_join': [vegZoneLayerField], 'joined_attributes_prefix': 'VegZone_',
                     'output_with_attribute': stands_file_join}
            processing.run("TBk:Optimized Spatial Join", param)

            # rename field to VegZone_Code (if vegZoneLayerField is anything other than "Code")
            vegZone_output_fieldname = 'VegZone_' + vegZoneLayerField
            if not (vegZone_output_fieldname == "VegZone_Code"):
                stands_file_rename = os.path.join(tmp_output_folder, "TBk_Bestandeskarte_vegZone2Rename.gpkg")
                processing.run("native:renametablefield", {
                    'INPUT': stands_file_join,
                    'FIELD': vegZone_output_fieldname, 'NEW_NAME': 'VegZone_Code',
                    'OUTPUT': stands_file_rename})
                # make output the input of nextstep
                stands_file_join = stands_file_rename

            # make output the input of nextstep
            stands_file_cleaned = stands_file_join

        # create field VegZone_Code (if not already existent through join) and fill (NULL values) with default
        stands_file_appended = os.path.join(tmp_output_folder, "TBk_Bestandeskarte_vegZone3.gpkg")
        formula = f'if("VegZone_Code","VegZone_Code", {vegZoneDefault})'
        processing.run("native:fieldcalculator", {
            'INPUT': stands_file_cleaned,
            'FIELD_NAME': 'VegZone_Code', 'FIELD_TYPE': 1, 'FIELD_LENGTH': 0, 'FIELD_PRECISION': 0,
            'FORMULA': formula, 'OUTPUT': stands_file_appended})

        # join if layer is provided
        if forestSiteLayer:
            stands_file_join = os.path.join(tmp_output_folder, "TBk_Bestandeskarte_ForestSite1join.gpkg")
            param = {'layer_to_join_attribute_on': stands_file_appended,
                     'attribute_layer': forestSiteLayer,
                     'fields_to_join': [forestSiteLayerField], 'joined_attributes_prefix': 'ForestSite_',
                     'output_with_attribute': stands_file_join}
            processing.run("TBk:Optimized Spatial Join", param)

            # rename field to ForestSite
            forestSite_output_fieldname = 'ForestSite_' + forestSiteLayerField
            stands_file_rename = os.path.join(tmp_output_folder, "TBk_Bestandeskarte_ForestSite2Rename.gpkg")
            processing.run("native:renametablefield", {
                'INPUT': stands_file_join,
                'FIELD': forestSite_output_fieldname, 'NEW_NAME': 'ForestSite',
                'OUTPUT': stands_file_rename})

            # make output the input of nextstep
            stands_file_appended = stands_file_rename

        if (forestSiteDefault is not None) and not (forestSiteDefault == ""):
            # create field ForestSite_Code (if not already existent through join) and fill (NULL values) with default
            stands_file_forestSite = os.path.join(tmp_output_folder, "TBk_Bestandeskarte_ForestSite3.gpkg")
            formula = f'if("ForestSite","ForestSite", \'{forestSiteDefault}\')'
            processing.run("native:fieldcalculator", {
                'INPUT': stands_file_appended,
                'FIELD_NAME': 'ForestSite', 'FIELD_TYPE': 2, 'FIELD_LENGTH': 80, 'FIELD_PRECISION': 0,
                'FORMULA': formula, 'OUTPUT': stands_file_forestSite})
            stands_file_appended = stands_file_forestSite

        return {'OUTPUT': stands_file_appended}

    def createInstance(self):
        """
        Returns a new algorithm instance
        """
        return TBkAppendStandAttributesAlgorithm()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Append stand attributes'

    #todo
    def shortHelpString(self):
        """
        Returns a localised short help string for the algorithm.
        """
        return ('')

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)
