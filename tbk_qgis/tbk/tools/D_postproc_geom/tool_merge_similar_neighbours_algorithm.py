# todo
import logging
import os

from qgis.core import (QgsProcessing,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterString)
from tbk_qgis.tbk.general.tbk_utilities import ensure_dir
from tbk_qgis.tbk.tools.D_postproc_geom.merge_similar_neighbours import merge_similar_neighbours
from tbk_qgis.tbk.tools.D_postproc_geom.tbk_qgis_processing_algorithm_toolsD import TBkProcessingAlgorithmToolD


class TBkMergeSimilarNeighboursAlgorithm(TBkProcessingAlgorithmToolD):
    """
    todo
    """
    # ------- Define Constants -------#
    # Constants used to refer to parameters and outputs.

    # These constants will be used when calling the algorithm from another algorithm,
    # or when calling from the QGIS console.

    # Directory containing the output files
    OUTPUT = "OUTPUT"
    # Folder for storing all input files and saving output files
    WORKING_ROOT = "working_root"
    # File storing configuration parameters
    CONFIG_FILE = "config_file"
    # Default log file name
    LOGFILE_NAME = "logfile_name"

    # Input layer to merge
    INPUT_TO_MERGE = "input_to_merge"
    # Merged output layer
    OUTPUT_MERGED = "output_merged"
    # Min. area to merge similar stands
    SIMILAR_NEIGHBOURS_MIN_AREA_M2 = "similar_neighbours_min_area"
    # hdom relative diff to merge similar stands
    SIMILAR_NEIGHBOURS_HDOM_DIFF_REL = "similar_neighbours_hdom_diff_rel"
    # Delete temporary files and fields
    DEL_TMP = "del_tmp"

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along with some other properties.
        """
        # Indicates whether the tool is running in standalone or modularized mode, and adjusts the GUI/behavior if needed.
        is_standalone_context = True

        # --- Handle config parameter
        if config:
            if 'is_standalone_context' in config:
                is_standalone_context = config['is_standalone_context']

        # --- Parameters generated by the stand delineation algorithm

        # Config file containing all parameter key-value pairs
        self.addParameter(QgsProcessingParameterFile(self.CONFIG_FILE,
                                                     'Configuration file to set the algorithm parameters. The bellow '
                                                     'non-optional parameters must still be set but will not be used.',
                                                     extension='toml',
                                                     optional=True))

        # These parameters are only displayed a config parameter is given
        if not config:
            self.addParameter(QgsProcessingParameterFile(self.WORKING_ROOT,
                                                         "Working root folder. This folder must contain the outputs "
                                                         "from previous steps.",
                                                         behavior=QgsProcessingParameterFile.Folder))

        # --- Main parameters

        # Not needed in a modular context; can use the previous algorithm's output directly
        if is_standalone_context:
            # Input stand map to be merged
            self.addParameter(
                QgsProcessingParameterFeatureSource(self.INPUT_TO_MERGE, "Input layer to be merged",
                                                    [QgsProcessing.TypeVectorPolygon],
                                                    optional=True))

            # Output
            # Add the parameter only if running as a standalone tool to avoid multiple outputs in modularized mode.
            self.addParameter(
                QgsProcessingParameterFileDestination(self.OUTPUT_MERGED, "Merge Similar Neighbours Output (GeoPackage)",
                                                      "GPKG files (*.gpkg)",
                                                      optional=True))

        # # Output
        # self.addParameter(
        #     QgsProcessingParameterFeatureSink(self.OUTPUT_MERGED, "Merged output",
        #                                                     QgsProcessing.TypeVectorPolygon))

        # --- Advanced Parameters
        parameter = QgsProcessingParameterNumber(self.SIMILAR_NEIGHBOURS_MIN_AREA_M2,
                                                 "Min. area to merge similar stands",
                                                 type=QgsProcessingParameterNumber.Integer, defaultValue=2000)
        self._add_advanced_parameter(parameter)

        parameter = QgsProcessingParameterNumber(self.SIMILAR_NEIGHBOURS_HDOM_DIFF_REL,
                                                 "hdom relative diff to merge similar stands",
                                                 type=QgsProcessingParameterNumber.Double, defaultValue=0.15)
        self._add_advanced_parameter(parameter)

        # Additional parameters
        parameter = QgsProcessingParameterString(self.LOGFILE_NAME, "Log File Name (.log)",
                                                 defaultValue="tbk_processing.log")
        self._add_advanced_parameter(parameter)

        parameter = QgsProcessingParameterBoolean(self.DEL_TMP, "Delete temporary files and fields",
                                                  defaultValue=True)
        self._add_advanced_parameter(parameter)

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # prepare the algorithm
        self.prepare(parameters, context, feedback)

        # Adapt the parameters if modular mode
        if "invoker_params" in parameters:

            input_name = parameters['invoker_params']["input_to_merge_name"]  # name of the parameter to use as input

            output_file_name = parameters['invoker_params']["output_name"] + ".gpkg"
            output_merged_path = os.path.join(parameters["working_root"], output_file_name)

            invoker_params = {
                "input_to_merge": parameters[input_name],
                "output_merged": output_merged_path
            }
            parameters.update(invoker_params)

        # --- get and check input parameters

        params = self._extract_context_params(parameters, context)

        # Handle the working root and temp output folders
        working_root = params.working_root
        ensure_dir(working_root)
        tmp_output_folder = self._get_tmp_output_path(params.working_root)
        ensure_dir(tmp_output_folder)

        # Set the logger
        self._configure_logging(params.working_root, params.logfile_name)
        log = logging.getLogger('Merge similar neighbours')

        # --- Merge similar neighbours
        log.info('Starting')
        log.debug(f"Used parameters: {working_root}, {params.input_to_merge}, {params.output_merged}, "
                  f"{params.similar_neighbours_min_area}, {params.similar_neighbours_hdom_diff_rel}, {params.del_tmp}")

        merged_file_path = merge_similar_neighbours(working_root,
                                           params.input_to_merge,
                                           params.output_merged,
                                           params.similar_neighbours_min_area,
                                           params.similar_neighbours_hdom_diff_rel,
                                           params.del_tmp)

        # todo: return as featuresink for QGIS to automatically load results
        return {'OUTPUT': merged_file_path}

    def createInstance(self):
        """
        Returns a new algorithm instance
        """
        return TBkMergeSimilarNeighboursAlgorithm()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return '3 Merge similar neighbours (FM)'

    # todo
    def shortHelpString(self):
        """
        Returns a localised short help string for the algorithm.
        """
        return ('')
